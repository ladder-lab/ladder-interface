{
  "address": "0xa1bf45AF7cDe8c105054611383E8ae3dA65615a3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hashAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1155",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "token1155Id",
          "type": "uint256"
        }
      ],
      "name": "Registered",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "hashAddress",
          "type": "address"
        }
      ],
      "name": "getOriginInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "hashAddress",
          "type": "address"
        }
      ],
      "name": "isOriginERC1155",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "originERC1155",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "originId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "token1155",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "token1155Id",
          "type": "uint256"
        }
      ],
      "name": "register",
      "outputs": [
        {
          "internalType": "address",
          "name": "hashAddress",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3c26603bd973664fab9b161f512e206e83fbfe8f938e52a6b07f66c2953c3940",
  "receipt": {
    "to": null,
    "from": "0xf3BDFcD50FC4BA48c97194a12c7e9a33422FF962",
    "contractAddress": "0xa1bf45AF7cDe8c105054611383E8ae3dA65615a3",
    "transactionIndex": 16,
    "gasUsed": "2620879",
    "logsBloom": "0x
    "blockHash": "0x8ea1201e185d3da32b2b97b675f0b3e65c2f994b496e768a7cbbf92970d00ec8",
    "transactionHash": "0x3c26603bd973664fab9b161f512e206e83fbfe8f938e52a6b07f66c2953c3940",
    "logs": [],
    "blockNumber": 10953929,
    "cumulativeGasUsed": "6081064",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf3BDFcD50FC4BA48c97194a12c7e9a33422FF962"
  ],
  "numDeployments": 1,
  "solcInputHash": "d4d612acc972313787f25ff6129c7380",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hashAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1155\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token1155Id\",\"type\":\"uint256\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"hashAddress\",\"type\":\"address\"}],\"name\":\"getOriginInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"hashAddress\",\"type\":\"address\"}],\"name\":\"isOriginERC1155\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"originERC1155\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"originId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token1155\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token1155Id\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"hashAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapV2Factory.sol\":\"UniswapV2Factory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/UniswapV2ERC20.sol\":{\"content\":\"pragma solidity =0.5.16;\\n\\nimport './interfaces/IUniswapV2ERC20.sol';\\nimport './libraries/SafeMath.sol';\\n\\ncontract UniswapV2ERC20 is IUniswapV2ERC20 {\\n    using SafeMath for uint;\\n\\n    string public constant name = 'Uniswap V2';\\n    string public constant symbol = 'UNI-V2';\\n    uint8 public constant decimals = 18;\\n    uint  public totalSupply;\\n    mapping(address => uint) public balanceOf;\\n    mapping(address => mapping(address => uint)) public allowance;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint) public nonces;\\n\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    constructor() public {\\n        uint chainId;\\n        assembly {\\n            chainId := chainid\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                keccak256(bytes(name)),\\n                keccak256(bytes('1')),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(address owner, address spender, uint value) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(address from, address to, uint value) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint value) external returns (bool) {\\n        if (allowance[from][msg.sender] != uint(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, 'UniswapV2: EXPIRED');\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                '\\\\x19\\\\x01',\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'UniswapV2: INVALID_SIGNATURE');\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0x0599f3684aef3e5f1144e14df1ddd39be24948b7cff125af9c9beca4bc94e1a2\"},\"contracts/UniswapV2Factory.sol\":{\"content\":\"pragma solidity =0.5.16;\\n\\nimport './interfaces/IUniswapV2Factory.sol';\\nimport './UniswapV2Pair.sol';\\nimport './interfaces/IERC1155.sol';\\n\\ncontract UniswapV2Factory is IUniswapV2Factory {\\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    address public feeTo;\\n    address public feeToSetter;\\n\\n    mapping(address => mapping(address => address)) public getPair;\\n    address[] public allPairs;\\n\\n    // hash address => ERC1155 address\\n    mapping(address => address) public originERC1155;\\n    // hash address => ERC1155 token Id\\n    mapping(address => uint256) public originId;\\n\\n    event Registered(address indexed hashAddress, address indexed token1155, uint indexed token1155Id);\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    constructor(address _feeToSetter) public {\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function allPairsLength() external view returns (uint) {\\n        return allPairs.length;\\n    }\\n\\n    function register(address token1155, uint256 token1155Id) external returns (address hashAddress) {\\n        require(IERC1155(token1155).supportsInterface(_INTERFACE_ID_ERC1155), \\\"Invalid ERC1155 contract\\\");\\n        hashAddress = address(uint256(keccak256(abi.encodePacked(token1155, token1155Id))));\\n\\n        originERC1155[hashAddress] = token1155;\\n        originId[hashAddress] = token1155Id;\\n\\n        emit Registered(hashAddress, token1155, token1155Id);\\n    }\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\\n        require(tokenA != tokenB, 'UniswapV2: IDENTICAL_ADDRESSES');\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'UniswapV2: ZERO_ADDRESS');\\n        require(getPair[token0][token1] == address(0), 'UniswapV2: PAIR_EXISTS'); // single check is sufficient\\n        bytes memory bytecode = type(UniswapV2Pair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        IUniswapV2Pair(pair).initialize(token0, token1);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external {\\n        require(msg.sender == feeToSetter, 'UniswapV2: FORBIDDEN');\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external {\\n        require(msg.sender == feeToSetter, 'UniswapV2: FORBIDDEN');\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function isOriginERC1155(address hashAddress) public view returns (bool) {\\n        return originERC1155[hashAddress] != address(0);\\n    }\\n\\n    function getOriginInfo(address hashAddress) public view returns (address, uint256) {\\n        return (\\n            originERC1155[hashAddress],\\n            originId[hashAddress]\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x96bb4c47b54fe4081606c9b7451742ca7e34179d8eee3f497f438d1533c04f0a\"},\"contracts/UniswapV2Pair.sol\":{\"content\":\"pragma solidity =0.5.16;\\n\\nimport './interfaces/IUniswapV2Pair.sol';\\nimport './interfaces/IERC1155.sol';\\nimport './UniswapV2ERC20.sol';\\nimport './libraries/Math.sol';\\nimport './libraries/UQ112x112.sol';\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/IUniswapV2Factory.sol';\\nimport './interfaces/IUniswapV2Callee.sol';\\n\\ncontract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {\\n    using SafeMath  for uint;\\n    using UQ112x112 for uint224;\\n\\n    uint public constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\n\\n    address public factory;\\n    address public token0;\\n    address public token1;\\n\\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    uint public price0CumulativeLast;\\n    uint public price1CumulativeLast;\\n    uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\n    uint private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, 'UniswapV2: LOCKED');\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _safeTransfer(address token, address to, uint value) private {\\n        if (IUniswapV2Factory(factory).isOriginERC1155(token)) {\\n            (address token1155, uint256 tokenId) = IUniswapV2Factory(factory).getOriginInfo(token);\\n            IERC1155(token1155).safeTransferFrom(address(this), to, tokenId, value, new bytes(0));\\n        } else {\\n            (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n            require(success && (data.length == 0 || abi.decode(data, (bool))), 'UniswapV2: TRANSFER_FAILED');\\n        }\\n    }\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    constructor() public {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _token1) external {\\n        require(msg.sender == factory, 'UniswapV2: FORBIDDEN'); // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'UniswapV2: OVERFLOW');\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\n        address feeTo = IUniswapV2Factory(factory).feeTo();\\n        feeOn = feeTo != address(0);\\n        uint _kLast = kLast; // gas savings\\n        if (feeOn) {\\n            if (_kLast != 0) {\\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\\n                uint rootKLast = Math.sqrt(_kLast);\\n                if (rootK > rootKLast) {\\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\\n                    uint denominator = rootK.mul(5).add(rootKLast);\\n                    uint liquidity = numerator / denominator;\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\n                }\\n            }\\n        } else if (_kLast != 0) {\\n            kLast = 0;\\n        }\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external lock returns (uint liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        uint balance0 = balanceOfToken(token0, address(this));\\n        uint balance1 = balanceOfToken(token1, address(this));\\n        uint amount0 = balance0.sub(_reserve0);\\n        uint amount1 = balance1.sub(_reserve1);\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n           _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED');\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to) external lock returns (uint amount0, uint amount1) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        address _token0 = token0;                                // gas savings\\n        address _token1 = token1;                                // gas savings\\n        uint balance0 = balanceOfToken(_token0, address(this));\\n        uint balance1 = balanceOfToken(_token1, address(this));\\n        uint liquidity = balanceOf[address(this)];\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED');\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = balanceOfToken(_token0, address(this));\\n        balance1 = balanceOfToken(_token1, address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\\n        require(amount0Out > 0 || amount1Out > 0, 'UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT');\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'UniswapV2: INSUFFICIENT_LIQUIDITY');\\n\\n        uint balance0;\\n        uint balance1;\\n        { // scope for _token{0,1}, avoids stack too deep errors\\n        address _token0 = token0;\\n        address _token1 = token1;\\n        require(to != _token0 && to != _token1, 'UniswapV2: INVALID_TO');\\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n        if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);\\n        balance0 = balanceOfToken(_token0, address(this));\\n        balance1 = balanceOfToken(_token1, address(this));\\n        }\\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n        require(amount0In > 0 || amount1In > 0, 'UniswapV2: INSUFFICIENT_INPUT_AMOUNT');\\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n        uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\\n        uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\\n        require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'UniswapV2: K');\\n        }\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(_token0, to, balanceOfToken(_token0, address(this)).sub(reserve0));\\n        _safeTransfer(_token1, to, balanceOfToken(_token1, address(this)).sub(reserve1));\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(balanceOfToken(token0, address(this)), balanceOfToken(token1, address(this)), reserve0, reserve1);\\n    }\\n\\n    function balanceOfToken(address token, address account) public view returns (uint256) {\\n        if (IUniswapV2Factory(factory).isOriginERC1155(token)) {\\n            (address token1155, uint256 tokenId) = IUniswapV2Factory(factory).getOriginInfo(token);\\n            return IERC1155(token1155).balanceOf(account, tokenId);\\n        } else {\\n            return IERC20(token).balanceOf(account);\\n        }\\n    }\\n\\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external pure returns(bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x55809bc7642367debe0d5963a4693521172a6b009edfafe32748a5793f4e84d9\"},\"contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity =0.5.16;\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155{\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n    \\n     /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe168dbd8500149c980a43a4d090f0a0bcc4b93637914ce8a77e8bd46153aa0d8\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x61db17aebc5d812c7002d15c1da954065e56abe49d64b14c034abe5604d70eb3\"},\"contracts/interfaces/IUniswapV2Callee.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xdb17a1fb73e261e736ae8862be2d9a32964fc4b3741f48980f5cdc9d92b99a96\"},\"contracts/interfaces/IUniswapV2ERC20.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x9e433765e9ef7b4ff5e406b260b222c47c2aa27d36df756db708064fcb239ae7\"},\"contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event Registered(address indexed hashAddress, address indexed token1155, uint indexed token1155Id);\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function register(address token1155, uint256 token1155Id) external returns (address hashAddress);\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n\\n    function isOriginERC1155(address hashAddress) external view returns (bool);\\n    function getOriginInfo(address hashAddress) external view returns (address, uint256);\\n}\\n\",\"keccak256\":\"0xff51aa26e307efe81c3ddc2c18b0dd53d8d1b91c2d2ce723fb8b76c82c92ba5e\"},\"contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/libraries/Math.sol\":{\"content\":\"pragma solidity =0.5.16;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05927cb4aa14897bd567607522c18d2d518fa803ade6f870fac244c6f3702a3b\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"pragma solidity =0.5.16;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n}\\n\",\"keccak256\":\"0x9c8465de751317860b623cd77f7f53f41a84b6624c0580ee526dcf7a2b7cb80c\"},\"contracts/libraries/UQ112x112.sol\":{\"content\":\"pragma solidity =0.5.16;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0x2240694530251ab376ae468d0a2d3ee8b3109e56f2acadbc203cdf341506dd31\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051612e67380380612e678339818101604052602081101561003357600080fd5b5051600180546001600160a01b0319166001600160a01b03909216919091179055612e04806100636000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636d705ebb1161008c578063c9c6539611610066578063c9c6539614610220578063d980e85c1461024e578063e6a4390514610288578063f46901ed146102b6576100cf565b80636d705ebb14610183578063879b20b9146101af578063a2e74af6146101f8576100cf565b8063017e7e58146100d4578063094b7415146100f85780630e583df0146101005780631e3dd18b14610138578063574f2ba314610155578063605365731461015d575b600080fd5b6100dc6102dc565b604080516001600160a01b039092168252519081900360200190f35b6100dc6102eb565b6101266004803603602081101561011657600080fd5b50356001600160a01b03166102fa565b60408051918252519081900360200190f35b6100dc6004803603602081101561014e57600080fd5b503561030c565b610126610333565b6100dc6004803603602081101561017357600080fd5b50356001600160a01b0316610339565b6100dc6004803603604081101561019957600080fd5b506001600160a01b038135169060200135610354565b6101d5600480360360208110156101c557600080fd5b50356001600160a01b03166104cf565b604080516001600160a01b03909316835260208301919091528051918290030190f35b61021e6004803603602081101561020e57600080fd5b50356001600160a01b03166104fa565b005b6100dc6004803603604081101561023657600080fd5b506001600160a01b0381358116916020013516610572565b6102746004803603602081101561026457600080fd5b50356001600160a01b03166108a3565b604080519115158252519081900360200190f35b6100dc6004803603604081101561029e57600080fd5b506001600160a01b03813581169160200135166108c3565b61021e600480360360208110156102cc57600080fd5b50356001600160a01b03166108e9565b6000546001600160a01b031681565b6001546001600160a01b031681565b60056020526000908152604090205481565b6003818154811061031957fe5b6000918252602090912001546001600160a01b0316905081565b60035490565b6004602052600090815260409020546001600160a01b031681565b604080516301ffc9a760e01b8152636cdb3d1360e11b600482015290516000916001600160a01b038516916301ffc9a791602480820192602092909190829003018186803b1580156103a557600080fd5b505afa1580156103b9573d6000803e3d6000fd5b505050506040513d60208110156103cf57600080fd5b5051610422576040805162461bcd60e51b815260206004820152601860248201527f496e76616c6964204552433131353520636f6e74726163740000000000000000604482015290519081900360640190fd5b50604080516bffffffffffffffffffffffff19606085901b1660208083019190915260348083018590528351808403909101815260549092018084528251928201929092206001600160a01b0381811660008181526004855286812080546001600160a01b031916938a169384179055600590945294832086905590938593919290917f199098452639b249bef6f727bc09ce903cece47ca72a8518bef9367ad39b6de79190a492915050565b6001600160a01b03908116600090815260046020908152604080832054600590925290912054911691565b6001546001600160a01b03163314610550576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b031614156105db576040805162461bcd60e51b815260206004820152601e60248201527f556e697377617056323a204944454e544943414c5f4144445245535345530000604482015290519081900360640190fd5b600080836001600160a01b0316856001600160a01b0316106105fe578385610601565b84845b90925090506001600160a01b038216610661576040805162461bcd60e51b815260206004820152601760248201527f556e697377617056323a205a45524f5f41444452455353000000000000000000604482015290519081900360640190fd5b6001600160a01b038281166000908152600260209081526040808320858516845290915290205416156106d4576040805162461bcd60e51b8152602060048201526016602482015275556e697377617056323a20504149525f45584953545360501b604482015290519081900360640190fd5b6060604051806020016106e690610961565b6020820181038252601f19601f8201166040525090506000838360405160200180836001600160a01b03166001600160a01b031660601b8152601401826001600160a01b03166001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f56040805163485cc95560e01b81526001600160a01b038781166004830152868116602483015291519297509087169163485cc9559160448082019260009290919082900301818387803b1580156107b957600080fd5b505af11580156107cd573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526002602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560038054600181018255958190527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b6001600160a01b0390811660009081526004602052604090205416151590565b60026020908152600092835260408084209091529082529020546001600160a01b031681565b6001546001600160a01b0316331461093f576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6124618061096f8339019056fe60806040526001600c5534801561001557600080fd5b50604051469080605261240f8239604080519182900360520182208282018252600a8352692ab734b9bbb0b8102b1960b11b6020938401528151808301835260018152603160f81b908401528151808401919091527fbfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101949094523060a0808601919091528151808603909101815260c09094019052825192019190912060035550600580546001600160a01b0319163317905561230a806101056000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806370a0823111610104578063bc25cf77116100a2578063dd62ed3e11610071578063dd62ed3e146105b3578063f23a6e61146105e1578063f59e38b714610693578063fff6cae9146106c1576101cf565b8063bc25cf771461052c578063c45a015514610552578063d21220a71461055a578063d505accf14610562576101cf565b806389afcb44116100de57806389afcb44146104b157806395d89b41146104f0578063a9059cbb146104f8578063ba9a7a5614610524576101cf565b806370a082311461045d5780637464fc3d146104835780637ecebe001461048b576101cf565b806330adf81f11610171578063485cc9551161014b578063485cc955146103f95780635909c0d5146104275780635a3d54931461042f5780636a62784214610437576101cf565b806330adf81f146103cb578063313ce567146103d35780633644e515146103f1576101cf565b8063095ea7b3116101ad578063095ea7b3146103175780630dfe16811461035757806318160ddd1461037b57806323b872dd14610395576101cf565b8063022c0d9f146101d457806306fdde03146102625780630902f1ac146102df575b600080fd5b610260600480360360808110156101ea57600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561022157600080fd5b82018360208201111561023357600080fd5b8035906020019184600183028401116401000000008311171561025557600080fd5b5090925090506106c9565b005b61026a610b30565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102a457818101518382015260200161028c565b50505050905090810190601f1680156102d15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102e7610b56565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103436004803603604081101561032d57600080fd5b506001600160a01b038135169060200135610b80565b604080519115158252519081900360200190f35b61035f610b97565b604080516001600160a01b039092168252519081900360200190f35b610383610ba6565b60408051918252519081900360200190f35b610343600480360360608110156103ab57600080fd5b506001600160a01b03813581169160208101359091169060400135610bac565b610383610c46565b6103db610c6a565b6040805160ff9092168252519081900360200190f35b610383610c6f565b6102606004803603604081101561040f57600080fd5b506001600160a01b0381358116916020013516610c75565b610383610cf9565b610383610cff565b6103836004803603602081101561044d57600080fd5b50356001600160a01b0316610d05565b6103836004803603602081101561047357600080fd5b50356001600160a01b0316610f43565b610383610f55565b610383600480360360208110156104a157600080fd5b50356001600160a01b0316610f5b565b6104d7600480360360208110156104c757600080fd5b50356001600160a01b0316610f6d565b6040805192835260208301919091528051918290030190f35b61026a611175565b6103436004803603604081101561050e57600080fd5b506001600160a01b038135169060200135611197565b6103836111a4565b6102606004803603602081101561054257600080fd5b50356001600160a01b03166111aa565b61035f61126a565b61035f611279565b610260600480360360e081101561057857600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611288565b610383600480360360408110156105c957600080fd5b506001600160a01b038135811691602001351661148a565b610676600480360360a08110156105f757600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a08101608082013564010000000081111561063757600080fd5b82018360208201111561064957600080fd5b8035906020019184600183028401116401000000008311171561066b57600080fd5b5090925090506114a7565b604080516001600160e01b03199092168252519081900360200190f35b610383600480360360408110156106a957600080fd5b506001600160a01b03813581169160200135166114b9565b6102606116c8565b600c54600114610714576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c55841515806107275750600084115b6107625760405162461bcd60e51b815260040180806020018281038252602581526020018061221c6025913960400191505060405180910390fd5b60008061076d610b56565b5091509150816001600160701b0316871080156107925750806001600160701b031686105b6107cd5760405162461bcd60e51b81526004018080602001828103825260218152602001806122656021913960400191505060405180910390fd5b60065460075460009182916001600160a01b0391821691908116908916821480159061080b5750806001600160a01b0316896001600160a01b031614155b610854576040805162461bcd60e51b8152602060048201526015602482015274556e697377617056323a20494e56414c49445f544f60581b604482015290519081900360640190fd5b8a1561086557610865828a8d61176b565b891561087657610876818a8c61176b565b861561093157886001600160a01b03166310d1e85c338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03166001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561091857600080fd5b505af115801561092c573d6000803e3d6000fd5b505050505b61093b82306114b9565b935061094781306114b9565b92505050600089856001600160701b0316038311610966576000610975565b89856001600160701b03160383035b9050600089856001600160701b03160383116109925760006109a1565b89856001600160701b03160383035b905060008211806109b25750600081115b6109ed5760405162461bcd60e51b81526004018080602001828103825260248152602001806122416024913960400191505060405180910390fd5b6000610a21610a0384600363ffffffff611b0516565b610a15876103e863ffffffff611b0516565b9063ffffffff611b6816565b90506000610a39610a0384600363ffffffff611b0516565b9050610a6a620f4240610a5e6001600160701b038b8116908b1663ffffffff611b0516565b9063ffffffff611b0516565b610a7a838363ffffffff611b0516565b1015610abc576040805162461bcd60e51b815260206004820152600c60248201526b556e697377617056323a204b60a01b604482015290519081900360640190fd5b5050610aca84848888611bb8565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600c55505050505050505050565b6040518060400160405280600a8152602001692ab734b9bbb0b8102b1960b11b81525081565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610b8d338484611d7d565b5060015b92915050565b6006546001600160a01b031681565b60005481565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610c31576001600160a01b0384166000908152600260209081526040808320338452909152902054610c0c908363ffffffff611b6816565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610c3c848484611ddf565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6005546001600160a01b03163314610ccb576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b60095481565b600a5481565b6000600c54600114610d52576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c81905580610d62610b56565b506006549193509150600090610d81906001600160a01b0316306114b9565b600754909150600090610d9d906001600160a01b0316306114b9565b90506000610dba836001600160701b03871663ffffffff611b6816565b90506000610dd7836001600160701b03871663ffffffff611b6816565b90506000610de58787611e99565b60005490915080610e2257610e0e6103e8610a15610e09878763ffffffff611b0516565b611ff7565b9850610e1d60006103e8612049565b610e71565b610e6e6001600160701b038916610e3f868463ffffffff611b0516565b81610e4657fe5b046001600160701b038916610e61868563ffffffff611b0516565b81610e6857fe5b046120df565b98505b60008911610eb05760405162461bcd60e51b81526004018080602001828103825260288152602001806122ae6028913960400191505060405180910390fd5b610eba8a8a612049565b610ec686868a8a611bb8565b8115610ef657600854610ef2906001600160701b0380821691600160701b90041663ffffffff611b0516565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600c5550949695505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b600080600c54600114610fbb576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c81905580610fcb610b56565b506006546007549294509092506001600160a01b0390811691166000610ff183306114b9565b90506000610fff83306114b9565b3060009081526001602052604081205491925061101c8888611e99565b60005490915080611033848763ffffffff611b0516565b8161103a57fe5b049a508061104e848663ffffffff611b0516565b8161105557fe5b04995060008b118015611068575060008a115b6110a35760405162461bcd60e51b81526004018080602001828103825260288152602001806122866028913960400191505060405180910390fd5b6110ad30846120f7565b6110b8878d8d61176b565b6110c3868d8c61176b565b6110cd87306114b9565b94506110d986306114b9565b93506110e785858b8b611bb8565b811561111757600854611113906001600160701b0380821691600160701b90041663ffffffff611b0516565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600c81905550915091565b604051806040016040528060068152602001652aa72496ab1960d11b81525081565b6000610b8d338484611ddf565b6103e881565b600c546001146111f5576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c556006546007546008546001600160a01b0392831692909116906112379083908590611232906001600160701b0316610a1584306114b9565b61176b565b600854611260908290859061123290600160701b90046001600160701b0316610a1584306114b9565b50506001600c5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b428410156112d2576040805162461bcd60e51b8152602060048201526012602482015271155b9a5cddd85c158c8e881156141254915160721b604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa1580156113ed573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906114235750886001600160a01b0316816001600160a01b0316145b611474576040805162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e415455524500000000604482015290519081900360640190fd5b61147f898989611d7d565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b63f23a6e6160e01b9695505050505050565b600554604080516336603a1760e21b81526001600160a01b0385811660048301529151600093929092169163d980e85c91602480820192602092909190829003018186803b15801561150a57600080fd5b505afa15801561151e573d6000803e3d6000fd5b505050506040513d602081101561153457600080fd5b50511561163f576005546040805163879b20b960e01b81526001600160a01b0386811660048301528251600094859492169263879b20b9926024808301939192829003018186803b15801561158857600080fd5b505afa15801561159c573d6000803e3d6000fd5b505050506040513d60408110156115b257600080fd5b50805160209182015160408051627eeac760e11b81526001600160a01b03898116600483015260248201849052915193965091945085169262fdd58e92604480840193829003018186803b15801561160957600080fd5b505afa15801561161d573d6000803e3d6000fd5b505050506040513d602081101561163357600080fd5b50519250610b91915050565b826001600160a01b03166370a08231836040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561169557600080fd5b505afa1580156116a9573d6000803e3d6000fd5b505050506040513d60208110156116bf57600080fd5b50519050610b91565b600c54600114611713576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c5560065461176490611732906001600160a01b0316306114b9565b600754611748906001600160a01b0316306114b9565b6008546001600160701b0380821691600160701b900416611bb8565b6001600c55565b600554604080516336603a1760e21b81526001600160a01b0386811660048301529151919092169163d980e85c916024808301926020929190829003018186803b1580156117b857600080fd5b505afa1580156117cc573d6000803e3d6000fd5b505050506040513d60208110156117e257600080fd5b50511561196a576005546040805163879b20b960e01b81526001600160a01b0386811660048301528251600094859492169263879b20b9926024808301939192829003018186803b15801561183657600080fd5b505afa15801561184a573d6000803e3d6000fd5b505050506040513d604081101561186057600080fd5b50805160209182015160408051600080825294810191829052637921219560e11b825230602482018181526001600160a01b038b8116604485015260648401869052608484018b905260a060a48501908152845160c48601819052979a5095985089169663f242432a9692958c958a958d9590949360e486019291908190849084905b838110156118fb5781810151838201526020016118e3565b50505050905090810190601f1680156119285780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b15801561194b57600080fd5b505af115801561195f573d6000803e3d6000fd5b505050505050611b00565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b60208310611a175780518252601f1990920191602091820191016119f8565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611a79576040519150601f19603f3d011682016040523d82523d6000602084013e611a7e565b606091505b5091509150818015611aac575080511580611aac5750808060200190516020811015611aa957600080fd5b50515b611afd576040805162461bcd60e51b815260206004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c4544000000000000604482015290519081900360640190fd5b50505b505050565b6000811580611b2057505080820282828281611b1d57fe5b04145b610b91576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b80820382811115610b91576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6001600160701b038411801590611bd657506001600160701b038311155b611c1d576040805162461bcd60e51b8152602060048201526013602482015272556e697377617056323a204f564552464c4f5760681b604482015290519081900360640190fd5b60085463ffffffff42811691600160e01b90048116820390811615801590611c4d57506001600160701b03841615155b8015611c6157506001600160701b03831615155b15611cd2578063ffffffff16611c8f85611c7a86612195565b6001600160e01b03169063ffffffff6121a716565b600980546001600160e01b03929092169290920201905563ffffffff8116611cba84611c7a87612195565b600a80546001600160e01b0392909216929092020190555b600880546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316600090815260016020526040902054611e08908263ffffffff611b6816565b6001600160a01b038085166000908152600160205260408082209390935590841681522054611e3d908263ffffffff6121cc16565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015611eea57600080fd5b505afa158015611efe573d6000803e3d6000fd5b505050506040513d6020811015611f1457600080fd5b5051600b546001600160a01b038216158015945091925090611fe3578015611fde576000611f57610e096001600160701b0388811690881663ffffffff611b0516565b90506000611f6483611ff7565b905080821115611fdb576000611f92611f83848463ffffffff611b6816565b6000549063ffffffff611b0516565b90506000611fb783611fab86600563ffffffff611b0516565b9063ffffffff6121cc16565b90506000818381611fc457fe5b0490508015611fd757611fd78782612049565b5050505b50505b611fef565b8015611fef576000600b555b505092915050565b6000600382111561203a575080600160028204015b818110156120345780915060028182858161202357fe5b04018161202c57fe5b04905061200c565b50612044565b8115612044575060015b919050565b60005461205c908263ffffffff6121cc16565b60009081556001600160a01b038316815260016020526040902054612087908263ffffffff6121cc16565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106120ee57816120f0565b825b9392505050565b6001600160a01b038216600090815260016020526040902054612120908263ffffffff611b6816565b6001600160a01b0383166000908152600160205260408120919091555461214d908263ffffffff611b6816565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b038416816121c457fe5b049392505050565b80820182811015610b91576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fdfe556e697377617056323a20494e53554646494349454e545f4f55545055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f494e5055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f4c4951554944495459556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4255524e4544556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4d494e544544a265627a7a7231582080ee3be9e7e08e4e2bf3b60538443c27411431b9f2c7935cb4ab5f0551a400e764736f6c63430005100032454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a265627a7a723158200de8e7f613ee22a06ee161fbbec4b69e607d58ab0d7bf200b8f2d68f54727f5264736f6c63430005100032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636d705ebb1161008c578063c9c6539611610066578063c9c6539614610220578063d980e85c1461024e578063e6a4390514610288578063f46901ed146102b6576100cf565b80636d705ebb14610183578063879b20b9146101af578063a2e74af6146101f8576100cf565b8063017e7e58146100d4578063094b7415146100f85780630e583df0146101005780631e3dd18b14610138578063574f2ba314610155578063605365731461015d575b600080fd5b6100dc6102dc565b604080516001600160a01b039092168252519081900360200190f35b6100dc6102eb565b6101266004803603602081101561011657600080fd5b50356001600160a01b03166102fa565b60408051918252519081900360200190f35b6100dc6004803603602081101561014e57600080fd5b503561030c565b610126610333565b6100dc6004803603602081101561017357600080fd5b50356001600160a01b0316610339565b6100dc6004803603604081101561019957600080fd5b506001600160a01b038135169060200135610354565b6101d5600480360360208110156101c557600080fd5b50356001600160a01b03166104cf565b604080516001600160a01b03909316835260208301919091528051918290030190f35b61021e6004803603602081101561020e57600080fd5b50356001600160a01b03166104fa565b005b6100dc6004803603604081101561023657600080fd5b506001600160a01b0381358116916020013516610572565b6102746004803603602081101561026457600080fd5b50356001600160a01b03166108a3565b604080519115158252519081900360200190f35b6100dc6004803603604081101561029e57600080fd5b506001600160a01b03813581169160200135166108c3565b61021e600480360360208110156102cc57600080fd5b50356001600160a01b03166108e9565b6000546001600160a01b031681565b6001546001600160a01b031681565b60056020526000908152604090205481565b6003818154811061031957fe5b6000918252602090912001546001600160a01b0316905081565b60035490565b6004602052600090815260409020546001600160a01b031681565b604080516301ffc9a760e01b8152636cdb3d1360e11b600482015290516000916001600160a01b038516916301ffc9a791602480820192602092909190829003018186803b1580156103a557600080fd5b505afa1580156103b9573d6000803e3d6000fd5b505050506040513d60208110156103cf57600080fd5b5051610422576040805162461bcd60e51b815260206004820152601860248201527f496e76616c6964204552433131353520636f6e74726163740000000000000000604482015290519081900360640190fd5b50604080516bffffffffffffffffffffffff19606085901b1660208083019190915260348083018590528351808403909101815260549092018084528251928201929092206001600160a01b0381811660008181526004855286812080546001600160a01b031916938a169384179055600590945294832086905590938593919290917f199098452639b249bef6f727bc09ce903cece47ca72a8518bef9367ad39b6de79190a492915050565b6001600160a01b03908116600090815260046020908152604080832054600590925290912054911691565b6001546001600160a01b03163314610550576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b031614156105db576040805162461bcd60e51b815260206004820152601e60248201527f556e697377617056323a204944454e544943414c5f4144445245535345530000604482015290519081900360640190fd5b600080836001600160a01b0316856001600160a01b0316106105fe578385610601565b84845b90925090506001600160a01b038216610661576040805162461bcd60e51b815260206004820152601760248201527f556e697377617056323a205a45524f5f41444452455353000000000000000000604482015290519081900360640190fd5b6001600160a01b038281166000908152600260209081526040808320858516845290915290205416156106d4576040805162461bcd60e51b8152602060048201526016602482015275556e697377617056323a20504149525f45584953545360501b604482015290519081900360640190fd5b6060604051806020016106e690610961565b6020820181038252601f19601f8201166040525090506000838360405160200180836001600160a01b03166001600160a01b031660601b8152601401826001600160a01b03166001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f56040805163485cc95560e01b81526001600160a01b038781166004830152868116602483015291519297509087169163485cc9559160448082019260009290919082900301818387803b1580156107b957600080fd5b505af11580156107cd573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526002602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560038054600181018255958190527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b6001600160a01b0390811660009081526004602052604090205416151590565b60026020908152600092835260408084209091529082529020546001600160a01b031681565b6001546001600160a01b0316331461093f576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6124618061096f8339019056fe60806040526001600c5534801561001557600080fd5b50604051469080605261240f8239604080519182900360520182208282018252600a8352692ab734b9bbb0b8102b1960b11b6020938401528151808301835260018152603160f81b908401528151808401919091527fbfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101949094523060a0808601919091528151808603909101815260c09094019052825192019190912060035550600580546001600160a01b0319163317905561230a806101056000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806370a0823111610104578063bc25cf77116100a2578063dd62ed3e11610071578063dd62ed3e146105b3578063f23a6e61146105e1578063f59e38b714610693578063fff6cae9146106c1576101cf565b8063bc25cf771461052c578063c45a015514610552578063d21220a71461055a578063d505accf14610562576101cf565b806389afcb44116100de57806389afcb44146104b157806395d89b41146104f0578063a9059cbb146104f8578063ba9a7a5614610524576101cf565b806370a082311461045d5780637464fc3d146104835780637ecebe001461048b576101cf565b806330adf81f11610171578063485cc9551161014b578063485cc955146103f95780635909c0d5146104275780635a3d54931461042f5780636a62784214610437576101cf565b806330adf81f146103cb578063313ce567146103d35780633644e515146103f1576101cf565b8063095ea7b3116101ad578063095ea7b3146103175780630dfe16811461035757806318160ddd1461037b57806323b872dd14610395576101cf565b8063022c0d9f146101d457806306fdde03146102625780630902f1ac146102df575b600080fd5b610260600480360360808110156101ea57600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561022157600080fd5b82018360208201111561023357600080fd5b8035906020019184600183028401116401000000008311171561025557600080fd5b5090925090506106c9565b005b61026a610b30565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102a457818101518382015260200161028c565b50505050905090810190601f1680156102d15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102e7610b56565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103436004803603604081101561032d57600080fd5b506001600160a01b038135169060200135610b80565b604080519115158252519081900360200190f35b61035f610b97565b604080516001600160a01b039092168252519081900360200190f35b610383610ba6565b60408051918252519081900360200190f35b610343600480360360608110156103ab57600080fd5b506001600160a01b03813581169160208101359091169060400135610bac565b610383610c46565b6103db610c6a565b6040805160ff9092168252519081900360200190f35b610383610c6f565b6102606004803603604081101561040f57600080fd5b506001600160a01b0381358116916020013516610c75565b610383610cf9565b610383610cff565b6103836004803603602081101561044d57600080fd5b50356001600160a01b0316610d05565b6103836004803603602081101561047357600080fd5b50356001600160a01b0316610f43565b610383610f55565b610383600480360360208110156104a157600080fd5b50356001600160a01b0316610f5b565b6104d7600480360360208110156104c757600080fd5b50356001600160a01b0316610f6d565b6040805192835260208301919091528051918290030190f35b61026a611175565b6103436004803603604081101561050e57600080fd5b506001600160a01b038135169060200135611197565b6103836111a4565b6102606004803603602081101561054257600080fd5b50356001600160a01b03166111aa565b61035f61126a565b61035f611279565b610260600480360360e081101561057857600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611288565b610383600480360360408110156105c957600080fd5b506001600160a01b038135811691602001351661148a565b610676600480360360a08110156105f757600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a08101608082013564010000000081111561063757600080fd5b82018360208201111561064957600080fd5b8035906020019184600183028401116401000000008311171561066b57600080fd5b5090925090506114a7565b604080516001600160e01b03199092168252519081900360200190f35b610383600480360360408110156106a957600080fd5b506001600160a01b03813581169160200135166114b9565b6102606116c8565b600c54600114610714576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c55841515806107275750600084115b6107625760405162461bcd60e51b815260040180806020018281038252602581526020018061221c6025913960400191505060405180910390fd5b60008061076d610b56565b5091509150816001600160701b0316871080156107925750806001600160701b031686105b6107cd5760405162461bcd60e51b81526004018080602001828103825260218152602001806122656021913960400191505060405180910390fd5b60065460075460009182916001600160a01b0391821691908116908916821480159061080b5750806001600160a01b0316896001600160a01b031614155b610854576040805162461bcd60e51b8152602060048201526015602482015274556e697377617056323a20494e56414c49445f544f60581b604482015290519081900360640190fd5b8a1561086557610865828a8d61176b565b891561087657610876818a8c61176b565b861561093157886001600160a01b03166310d1e85c338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03166001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561091857600080fd5b505af115801561092c573d6000803e3d6000fd5b505050505b61093b82306114b9565b935061094781306114b9565b92505050600089856001600160701b0316038311610966576000610975565b89856001600160701b03160383035b9050600089856001600160701b03160383116109925760006109a1565b89856001600160701b03160383035b905060008211806109b25750600081115b6109ed5760405162461bcd60e51b81526004018080602001828103825260248152602001806122416024913960400191505060405180910390fd5b6000610a21610a0384600363ffffffff611b0516565b610a15876103e863ffffffff611b0516565b9063ffffffff611b6816565b90506000610a39610a0384600363ffffffff611b0516565b9050610a6a620f4240610a5e6001600160701b038b8116908b1663ffffffff611b0516565b9063ffffffff611b0516565b610a7a838363ffffffff611b0516565b1015610abc576040805162461bcd60e51b815260206004820152600c60248201526b556e697377617056323a204b60a01b604482015290519081900360640190fd5b5050610aca84848888611bb8565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600c55505050505050505050565b6040518060400160405280600a8152602001692ab734b9bbb0b8102b1960b11b81525081565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610b8d338484611d7d565b5060015b92915050565b6006546001600160a01b031681565b60005481565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610c31576001600160a01b0384166000908152600260209081526040808320338452909152902054610c0c908363ffffffff611b6816565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610c3c848484611ddf565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6005546001600160a01b03163314610ccb576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b60095481565b600a5481565b6000600c54600114610d52576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c81905580610d62610b56565b506006549193509150600090610d81906001600160a01b0316306114b9565b600754909150600090610d9d906001600160a01b0316306114b9565b90506000610dba836001600160701b03871663ffffffff611b6816565b90506000610dd7836001600160701b03871663ffffffff611b6816565b90506000610de58787611e99565b60005490915080610e2257610e0e6103e8610a15610e09878763ffffffff611b0516565b611ff7565b9850610e1d60006103e8612049565b610e71565b610e6e6001600160701b038916610e3f868463ffffffff611b0516565b81610e4657fe5b046001600160701b038916610e61868563ffffffff611b0516565b81610e6857fe5b046120df565b98505b60008911610eb05760405162461bcd60e51b81526004018080602001828103825260288152602001806122ae6028913960400191505060405180910390fd5b610eba8a8a612049565b610ec686868a8a611bb8565b8115610ef657600854610ef2906001600160701b0380821691600160701b90041663ffffffff611b0516565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600c5550949695505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b600080600c54600114610fbb576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c81905580610fcb610b56565b506006546007549294509092506001600160a01b0390811691166000610ff183306114b9565b90506000610fff83306114b9565b3060009081526001602052604081205491925061101c8888611e99565b60005490915080611033848763ffffffff611b0516565b8161103a57fe5b049a508061104e848663ffffffff611b0516565b8161105557fe5b04995060008b118015611068575060008a115b6110a35760405162461bcd60e51b81526004018080602001828103825260288152602001806122866028913960400191505060405180910390fd5b6110ad30846120f7565b6110b8878d8d61176b565b6110c3868d8c61176b565b6110cd87306114b9565b94506110d986306114b9565b93506110e785858b8b611bb8565b811561111757600854611113906001600160701b0380821691600160701b90041663ffffffff611b0516565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600c81905550915091565b604051806040016040528060068152602001652aa72496ab1960d11b81525081565b6000610b8d338484611ddf565b6103e881565b600c546001146111f5576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c556006546007546008546001600160a01b0392831692909116906112379083908590611232906001600160701b0316610a1584306114b9565b61176b565b600854611260908290859061123290600160701b90046001600160701b0316610a1584306114b9565b50506001600c5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b428410156112d2576040805162461bcd60e51b8152602060048201526012602482015271155b9a5cddd85c158c8e881156141254915160721b604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa1580156113ed573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906114235750886001600160a01b0316816001600160a01b0316145b611474576040805162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e415455524500000000604482015290519081900360640190fd5b61147f898989611d7d565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b63f23a6e6160e01b9695505050505050565b600554604080516336603a1760e21b81526001600160a01b0385811660048301529151600093929092169163d980e85c91602480820192602092909190829003018186803b15801561150a57600080fd5b505afa15801561151e573d6000803e3d6000fd5b505050506040513d602081101561153457600080fd5b50511561163f576005546040805163879b20b960e01b81526001600160a01b0386811660048301528251600094859492169263879b20b9926024808301939192829003018186803b15801561158857600080fd5b505afa15801561159c573d6000803e3d6000fd5b505050506040513d60408110156115b257600080fd5b50805160209182015160408051627eeac760e11b81526001600160a01b03898116600483015260248201849052915193965091945085169262fdd58e92604480840193829003018186803b15801561160957600080fd5b505afa15801561161d573d6000803e3d6000fd5b505050506040513d602081101561163357600080fd5b50519250610b91915050565b826001600160a01b03166370a08231836040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561169557600080fd5b505afa1580156116a9573d6000803e3d6000fd5b505050506040513d60208110156116bf57600080fd5b50519050610b91565b600c54600114611713576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c5560065461176490611732906001600160a01b0316306114b9565b600754611748906001600160a01b0316306114b9565b6008546001600160701b0380821691600160701b900416611bb8565b6001600c55565b600554604080516336603a1760e21b81526001600160a01b0386811660048301529151919092169163d980e85c916024808301926020929190829003018186803b1580156117b857600080fd5b505afa1580156117cc573d6000803e3d6000fd5b505050506040513d60208110156117e257600080fd5b50511561196a576005546040805163879b20b960e01b81526001600160a01b0386811660048301528251600094859492169263879b20b9926024808301939192829003018186803b15801561183657600080fd5b505afa15801561184a573d6000803e3d6000fd5b505050506040513d604081101561186057600080fd5b50805160209182015160408051600080825294810191829052637921219560e11b825230602482018181526001600160a01b038b8116604485015260648401869052608484018b905260a060a48501908152845160c48601819052979a5095985089169663f242432a9692958c958a958d9590949360e486019291908190849084905b838110156118fb5781810151838201526020016118e3565b50505050905090810190601f1680156119285780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b15801561194b57600080fd5b505af115801561195f573d6000803e3d6000fd5b505050505050611b00565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b60208310611a175780518252601f1990920191602091820191016119f8565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611a79576040519150601f19603f3d011682016040523d82523d6000602084013e611a7e565b606091505b5091509150818015611aac575080511580611aac5750808060200190516020811015611aa957600080fd5b50515b611afd576040805162461bcd60e51b815260206004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c4544000000000000604482015290519081900360640190fd5b50505b505050565b6000811580611b2057505080820282828281611b1d57fe5b04145b610b91576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b80820382811115610b91576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6001600160701b038411801590611bd657506001600160701b038311155b611c1d576040805162461bcd60e51b8152602060048201526013602482015272556e697377617056323a204f564552464c4f5760681b604482015290519081900360640190fd5b60085463ffffffff42811691600160e01b90048116820390811615801590611c4d57506001600160701b03841615155b8015611c6157506001600160701b03831615155b15611cd2578063ffffffff16611c8f85611c7a86612195565b6001600160e01b03169063ffffffff6121a716565b600980546001600160e01b03929092169290920201905563ffffffff8116611cba84611c7a87612195565b600a80546001600160e01b0392909216929092020190555b600880546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316600090815260016020526040902054611e08908263ffffffff611b6816565b6001600160a01b038085166000908152600160205260408082209390935590841681522054611e3d908263ffffffff6121cc16565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015611eea57600080fd5b505afa158015611efe573d6000803e3d6000fd5b505050506040513d6020811015611f1457600080fd5b5051600b546001600160a01b038216158015945091925090611fe3578015611fde576000611f57610e096001600160701b0388811690881663ffffffff611b0516565b90506000611f6483611ff7565b905080821115611fdb576000611f92611f83848463ffffffff611b6816565b6000549063ffffffff611b0516565b90506000611fb783611fab86600563ffffffff611b0516565b9063ffffffff6121cc16565b90506000818381611fc457fe5b0490508015611fd757611fd78782612049565b5050505b50505b611fef565b8015611fef576000600b555b505092915050565b6000600382111561203a575080600160028204015b818110156120345780915060028182858161202357fe5b04018161202c57fe5b04905061200c565b50612044565b8115612044575060015b919050565b60005461205c908263ffffffff6121cc16565b60009081556001600160a01b038316815260016020526040902054612087908263ffffffff6121cc16565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106120ee57816120f0565b825b9392505050565b6001600160a01b038216600090815260016020526040902054612120908263ffffffff611b6816565b6001600160a01b0383166000908152600160205260408120919091555461214d908263ffffffff611b6816565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b038416816121c457fe5b049392505050565b80820182811015610b91576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fdfe556e697377617056323a20494e53554646494349454e545f4f55545055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f494e5055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f4c4951554944495459556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4255524e4544556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4d494e544544a265627a7a7231582080ee3be9e7e08e4e2bf3b60538443c27411431b9f2c7935cb4ab5f0551a400e764736f6c63430005100032454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a265627a7a723158200de8e7f613ee22a06ee161fbbec4b69e607d58ab0d7bf200b8f2d68f54727f5264736f6c63430005100032",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 398,
        "contract": "contracts/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 404,
        "contract": "contracts/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "getPair",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 407,
        "contract": "contracts/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "allPairs",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 411,
        "contract": "contracts/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "originERC1155",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 415,
        "contract": "contracts/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "originId",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}